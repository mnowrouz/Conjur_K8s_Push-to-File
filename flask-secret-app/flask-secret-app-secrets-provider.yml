apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-app                            # Name of the Deployment
  namespace: test-app-namespace            # Namespace for the app
  labels:
    app: test-app
spec:
  replicas: 1                               # One pod only for demo or dev
  selector:
    matchLabels:
      app: test-app                         # Selector must match pod template labels
  template:
    metadata:
      labels:
        app: test-app
      annotations:
        conjur.org/container-mode: sidecar           # Run Secrets Provider as a sidecar
        conjur.org/secrets-destination: file         # Secrets are written to files (not env vars)
        conjur.org/jwt-token-path: /var/run/secrets/tokens/jwt  # JWT file path projected by K8s

        # Mapping of secret aliases to full Conjur variable IDs
        conjur.org/conjur-secrets.test-app: |
          - admin-username: <path to secret in Conjur Cloud>
          - admin-password: <path to secret in Conjur Cloud>

        # File output location and format for the secrets
        conjur.org/secret-file-path.test-app: "./credentials.yaml"   # relative to /conjur/ in sidecar
        conjur.org/secret-file-format.test-app: "yaml"               # file format

        # Optional: refresh interval for rotating secrets
        conjur.org/secrets-refresh-interval: 10s

    spec:
      serviceAccountName: test-app-sa         # Service account with proper Conjur JWT access

      containers:
      - name: test-app
        image: <APPLICATION_IMAGE>            # Replace with your app image
        imagePullPolicy: <PULL_POLICY>        # e.g., IfNotPresent or Always

        # Mount the shared volume where the sidecar will write secrets
        volumeMounts:
          - name: conjur-secrets
            mountPath: /opt/secrets/conjur    # Your app will read secrets from here
            readOnly: true

      - name: cyberark-secrets-provider-for-k8s
        image: cyberark/secrets-provider-for-k8s:latest
        imagePullPolicy: Always

        # Mounts needed for the Secrets Provider to function
        volumeMounts:
          - name: conjur-status               # Used for health status communication
            mountPath: /conjur/status
          - name: podinfo                     # Provides pod annotations via downward API
            mountPath: /conjur/podinfo
          - name: conjur-secrets              # Shared secrets output location
            mountPath: /conjur/               # Internal to sidecar
          - name: jwt-token                   # Where Kubernetes projects the service account JWT
            mountPath: /var/run/secrets/tokens

        # Sets the namespace so the sidecar can locate resources
        env:
          - name: MY_POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace

        # Load Conjur connection settings (account, authn URL, appliance URL, etc.)
        envFrom:
          - configMapRef:
              name: conjur-connect

      volumes:
        - name: conjur-status
          emptyDir:
            medium: Memory                    # RAM-backed, good for status info

        - name: podinfo
          downwardAPI:                        # Exposes pod annotations to the Secrets Provider
            items:
              - path: "annotations"
                fieldRef:
                  fieldPath: metadata.annotations

        - name: conjur-secrets
          emptyDir:
            medium: Memory                    # Shared secrets volume between app and sidecar

        - name: jwt-token
          projected:
            sources:
              - serviceAccountToken:          # This generates the JWT token for the pod
                  path: jwt
                  expirationSeconds: 6000
                  audience: conjur            # Must match the 'audience' in your Conjur policy
